<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Categorie;


/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
	public function getArticlesIndex($page,$maxArticles){
		
		/*C'est la même chose qu'en dessous mais en plus développé.
		 * $qb=$this->_em->createQueryBuilder()->select('a')->from($this->_entityName,'a');
		 */
		$pub=1;
		/*Création d'un paramètre pour le protéger de toutes inclusions SQL en utilisant une définition du paramètre
		 * dans la requête
		*/
		
		$qb=$this->createQueryBuilder("a")->leftJoin('a.image', 'i')->addSelect('i')
		->leftJoin('a.categories','c')->addSelect('c')->where('a.publication =:pub')
		->setParameter('pub', $pub)->orderBy('a.date','DESC')->setMaxResults($maxArticles)
		->setFirstResult(($page-1)*$maxArticles)->groupBy('a.id');
		;
		
		//$qb=$this->createQueryBuilder("a")->leftJoin('a.image', 'i')->addSelect('i')->leftJoin('a.categories','c')
		//->addSelect('c')->where('a.publication =:pub')->setParameter('pub', $pub)->orderBy('a.date','DESC');
		
		$query=$qb->getQuery();
		return $query->getResult();//retourne un tableau d'objet
		// on peut inclure directement un paginator dans le renvoi de la fonction
		//return new \Doctrine\ORM\Tools\Pagination\Paginator($query);
	}
	
	public function getArticlesByCat($categorie){
		/*C'est la même chose qu'en dessous mais en plus développé.
		 * $qb=$this->_em->createQueryBuilder()->select('a')->from($this->_entityName,'a');
		 */
		$pub=1;
		/*Création d'un paramètre pour le protéger de toutes inclusions SQL en utilisant une définition du paramètre
		 * dans la requête
		 */
		
		$qb=$this->createQueryBuilder("a")->leftJoin('a.categories','c')->addSelect('c')
		->where('a.publication =:pub')->andWhere('c=:cat')->setParameter('pub', $pub)->setParameter('cat', $categorie)
		->orderBy('a.date','DESC');
		$query=$qb->getQuery();
		return $query->getResult();//retourne un tableau d'objet
		//return $query->getArrayResult();//retourne un tableau de tableau
	}
	
	public function countArticles(){
		/*C'est la même chose qu'en dessous mais en plus développé.
		 * $qb=$this->_em->createQueryBuilder()->select('a')->from($this->_entityName,'a');
		 */
		$pub=1;
		/*Création d'un paramètre pour le protéger de toutes inclusions SQL en utilisant une définition du paramètre
		 * dans la requête
		 */
	
		$qb=$this->createQueryBuilder("a")
		->where('a.publication =:pub')->setParameter('pub', $pub)
		->select('count(a.id)');
		$valeur=$qb->getQuery()->getSingleScalarResult();
		return $valeur;
		//return $query->getArrayResult();//retourne un tableau de tableau
	}
	
	public function countArticlesByCat($categorie){
		/*C'est la même chose qu'en dessous mais en plus développé.
		 * $qb=$this->_em->createQueryBuilder()->select('a')->from($this->_entityName,'a');
		 */
		$pub=1;
		/*Création d'un paramètre pour le protéger de toutes inclusions SQL en utilisant une définition du paramètre
		 * dans la requête
		 */
	
		$qb=$this->createQueryBuilder("a")->leftJoin('a.categories','c')
		->where('a.publication =:pub')->andWhere('c=:cat')->setParameter('pub', $pub)->setParameter('cat', $categorie)
		->select('count(a.id)');
		$valeur=$qb->getQuery()->getSingleScalarResult();
		return $valeur;
		//return $query->getArrayResult();//retourne un tableau de tableau
	}
}

